name: 💥 Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read

jobs:
  validate-destruction:
    name: ⚠️ Validate Destroy Request
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
      tf_dir: ${{ steps.detect.outputs.tf_dir }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚠️ Validate Confirmation
        id: check
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" = "DESTROY" ]; then
            echo "✅ Destruction confirmed"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid confirmation. You must type 'DESTROY' exactly."
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 🔍 Detect Terraform Directory
        id: detect
        if: steps.check.outputs.proceed == 'true'
        run: |
          if [ -f "main.tf" ]; then
            echo "tf_dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "tf_dir=./terraform" >> $GITHUB_OUTPUT
          else
            echo "❌ Cannot find main.tf"
            exit 1
          fi

  destroy:
    name: 💥 Destroy All Resources
    runs-on: ubuntu-latest
    needs: validate-destruction
    if: needs.validate-destruction.outputs.proceed == 'true'
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📂 Prepare Configuration
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        run: |
          if [ ! -f terraform.tfvars ]; then
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << 'EOF'
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website"
          environment       = "${{ github.event.inputs.environment }}"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        run: terraform init

      - name: 📋 Show What Will Be Destroyed
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        run: |
          echo "## 💥 Resources to be Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get resource info before destroying
          BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "N/A")
          LOGS_BUCKET=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "N/A")
          DIST_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "N/A")
          PROJECT_NAME="${{ github.event.inputs.environment == 'production' && 'secure-website' || 'secure-website-staging' }}"
          
          echo "| Resource Type | Name |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Bucket | $BUCKET |" >> $GITHUB_STEP_SUMMARY
          echo "| Logs Bucket | $LOGS_BUCKET |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront Distribution | $DIST_ID |" >> $GITHUB_STEP_SUMMARY
          echo "| WAF Web ACL | ${PROJECT_NAME}-${{ github.event.inputs.environment }}-waf |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudWatch Dashboard | ${PROJECT_NAME}-${{ github.event.inputs.environment }}-dashboard |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🗑️ Empty S3 Buckets
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        run: |
          echo "🗑️ Emptying S3 buckets..."
          
          # Get bucket names
          WEBSITE_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          LOGS_BUCKET=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "")
          
          # Empty website bucket
          if [ -n "$WEBSITE_BUCKET" ] && [ "$WEBSITE_BUCKET" != "N/A" ]; then
            echo "Emptying website bucket: $WEBSITE_BUCKET"
            aws s3 rm s3://$WEBSITE_BUCKET --recursive || true
            
            # Remove all versions if versioned
            aws s3api list-object-versions \
              --bucket $WEBSITE_BUCKET \
              --output json \
              --query 'Versions[].{Key:Key,VersionId:VersionId}' 2>/dev/null | \
            jq -r '.[] | "--key \(.Key) --version-id \(.VersionId)"' | \
            xargs -I {} aws s3api delete-object --bucket $WEBSITE_BUCKET {} || true
            
            # Remove delete markers
            aws s3api list-object-versions \
              --bucket $WEBSITE_BUCKET \
              --output json \
              --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' 2>/dev/null | \
            jq -r '.[] | "--key \(.Key) --version-id \(.VersionId)"' | \
            xargs -I {} aws s3api delete-object --bucket $WEBSITE_BUCKET {} || true
          fi
          
          # Empty logs bucket
          if [ -n "$LOGS_BUCKET" ] && [ "$LOGS_BUCKET" != "N/A" ]; then
            echo "Emptying logs bucket: $LOGS_BUCKET"
            aws s3 rm s3://$LOGS_BUCKET --recursive || true
            
            # Remove all versions if versioned
            aws s3api list-object-versions \
              --bucket $LOGS_BUCKET \
              --output json \
              --query 'Versions[].{Key:Key,VersionId:VersionId}' 2>/dev/null | \
            jq -r '.[] | "--key \(.Key) --version-id \(.VersionId)"' | \
            xargs -I {} aws s3api delete-object --bucket $LOGS_BUCKET {} || true
          fi
          
          echo "✅ Buckets emptied"

      - name: 💥 Terraform Destroy
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        run: |
          echo "💥 Starting infrastructure destruction..."
          terraform destroy -auto-approve
          echo "✅ Destruction complete"

      - name: 🧹 Cleanup State
        working-directory: ${{ needs.validate-destruction.outputs.tf_dir }}
        continue-on-error: true
        run: |
          # Remove local state files (if not using remote backend)
          rm -f terraform.tfstate*
          rm -f .terraform.lock.hcl
          rm -rf .terraform/
          echo "✅ Local state cleaned"

      - name: 📊 Destruction Summary
        run: |
          echo "## ✅ Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All resources have been successfully destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ S3 Buckets emptied and deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CloudFront Distribution deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ WAF Web ACL deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CloudWatch resources deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All associated resources cleaned up" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Destroyed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can redeploy anytime using the Deploy Infrastructure workflow." >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Notify Completion
        run: |
          echo "🎉 Destruction completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "All AWS resources have been removed."