name: 💥 Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read

jobs:
  destroy:
    name: 💥 Destroy All Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ You must type DESTROY exactly to confirm"
            exit 1
          fi
          echo "✅ Destruction confirmed"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Detect Terraform Directory
        id: detect
        run: |
          if [ -f "main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          else
            echo "dir=." >> $GITHUB_OUTPUT
          fi

      - name: Scan for Resources to Destroy
        id: scan
        run: |
          PROJECT_NAME=$(grep -E '^project_name\s*=' terraform/terraform.tfvars | cut -d '"' -f2)
          PREFIX="${PROJECT_NAME}-${{ github.event.inputs.environment }}"
          
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT
          
          echo "## 💥 Scanning for Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Prefix:** $PREFIX" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Type | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # IMPROVED CloudFront detection - uses PROJECT_NAME for comment matching
          CF_DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PROJECT_NAME\")) | .Id" 2>/dev/null || true)
          CF_COUNT=$(echo "$CF_DISTRIBUTIONS" | grep -v '^$' | wc -l)
          echo "| CloudFront Distributions | $CF_COUNT | Will be disabled then deleted |" >> $GITHUB_STEP_SUMMARY
    
          # Also check by origin domain as backup
          CF_ORIGIN_COUNT=$(aws cloudfront list-distributions --output json 2>/dev/null | jq -r ".DistributionList.Items[]? | .Origins.Items[]? | select(.DomainName != null) | select(.DomainName | contains(\"$PREFIX\")) | .Id" | sort -u | wc -l)
          if [ $CF_ORIGIN_COUNT -gt 0 ]; then
            echo "| CloudFront (by origin) | $CF_ORIGIN_COUNT | Additional detection method |" >> $GITHUB_STEP_SUMMARY
          fi
          
          WAF_COUNT=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX-waf\")) | .Name" | wc -l)
          echo "| WAF Web ACLs | $WAF_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          S3_COUNT=$(aws s3api list-buckets --output json 2>/dev/null | jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          echo "| S3 Buckets | $S3_COUNT | Will be emptied and deleted |" >> $GITHUB_STEP_SUMMARY
          
          OAC_COUNT=$(aws cloudfront list-origin-access-controls --output json 2>/dev/null | jq -r ".OriginAccessControlList.Items[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          echo "| Origin Access Controls | $OAC_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          RHP_COUNT=$(aws cloudfront list-response-headers-policies --type custom --output json 2>/dev/null | jq -r ".ResponseHeadersPolicyList.Items[]? | select(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name | contains(\"$PREFIX\")) | .ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name" | wc -l)
          echo "| Response Headers Policies | $RHP_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: "Step 1: Disable and Delete CloudFront Distributions"
        continue-on-error: true
        run: |
            PROJECT_NAME="${{ steps.scan.outputs.project_name }}"
            PREFIX="${{ steps.scan.outputs.prefix }}"
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "☁️  STEP 1: Disabling and Deleting CloudFront Distributions"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "🔍 Using PROJECT_NAME: $PROJECT_NAME"
            echo "🔍 Using PREFIX: $PREFIX"
            
            # Use the EXACT SAME detection logic as the scan step
            DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
              jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PROJECT_NAME\")) | \"\(.Id)|\(.Comment)|\(.Enabled)|\(.Status)\"" 2>/dev/null || true)
            
            if [ -z "$DISTRIBUTIONS" ]; then
              echo "❌ No CloudFront distributions found with PROJECT_NAME: $PROJECT_NAME"
              echo "💡 Trying alternative detection by origin domain..."
              
              # Alternative detection by origin domain
              DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                jq -r ".DistributionList.Items[]? | .Id as \$id | .Comment as \$comment | .Origins.Items[]? | select(.DomainName != null) | select(.DomainName | contains(\"$PREFIX\")) | \"\$id|\$comment|unknown|unknown\"" 2>/dev/null || true)
            fi
            
            if [ -z "$DISTRIBUTIONS" ]; then
              echo "❌ No CloudFront distributions found with either method."
            else
              echo "📍 Found distributions using the same logic as scan:"
              echo "$DISTRIBUTIONS" | while IFS='|' read -r dist_id comment enabled status; do
                echo "   🔸 $dist_id - $comment (Enabled: $enabled, Status: $status)"
              done
              echo ""
              
              # Disable distributions
              echo "$DISTRIBUTIONS" | while IFS='|' read -r dist_id comment enabled status; do
                if [ "$enabled" = "true" ]; then
                  echo "📍 Disabling: $dist_id"
                  aws cloudfront get-distribution-config --id "$dist_id" > /tmp/cf_$dist_id.json 2>/dev/null
                  if [ $? -eq 0 ]; then
                    ETAG=$(jq -r '.ETag' /tmp/cf_$dist_id.json)
                    jq '.DistributionConfig.Enabled = false' /tmp/cf_$dist_id.json > /tmp/cf_disabled_$dist_id.json
                    aws cloudfront update-distribution \
                      --id "$dist_id" \
                      --if-match "$ETAG" \
                      --distribution-config "$(jq -c '.DistributionConfig' /tmp/cf_disabled_$dist_id.json)" \
                      >/dev/null 2>&1 && echo "   ✅ Disabled" || echo "   ❌ Failed to disable"
                  else
                    echo "   ❌ Could not get distribution config"
                  fi
                else
                  echo "📍 Already disabled: $dist_id"
                fi
              done
              
              echo ""
              echo "⏳ Waiting 60 seconds for disable operations to start..."
              sleep 60
            fi

      - name: "Step 2: Empty and Delete S3 Buckets"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 STEP 2: Emptying and Deleting S3 Buckets"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          BUCKETS=$(aws s3api list-buckets --output json 2>/dev/null | \
            jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" 2>/dev/null || true)
          
          if [ -z "$BUCKETS" ]; then
            echo "ℹ️  No S3 buckets found with prefix: $PREFIX"
          else
            echo "$BUCKETS" | while read -r bucket; do
              echo "📍 Bucket: $bucket"
              echo "   Emptying all objects and versions..."
              
              # Delete all object versions
              aws s3api list-object-versions --bucket "$bucket" --output json 2>/dev/null | \
                jq -r '.Versions[]?, .DeleteMarkers[]? | "\(.Key)\t\(.VersionId)"' | \
                while IFS=$'\t' read -r key version; do
                  if [ -n "$key" ]; then
                    aws s3api delete-object --bucket "$bucket" --key "$key" --version-id "$version" 2>/dev/null || true
                  fi
                done
              
              # Delete all objects (non-versioned)
              aws s3 rm "s3://$bucket" --recursive --quiet 2>/dev/null || true
              
              echo "   Deleting bucket..."
              aws s3 rb "s3://$bucket" --force 2>&1 | grep -v "BucketNotEmpty\|NoSuchBucket" && \
              echo "   ✅ Deleted" || echo "   ⚠️  Could not delete (may still have objects)"
            done
          fi

      - name: "Step 3: Delete WAF Web ACLs"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🛡️  STEP 3: Deleting WAF Web ACLs"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          WAFS=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | \
            jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)|\(.LockToken)\"" 2>/dev/null || true)
          
          if [ -z "$WAFS" ]; then
            echo "ℹ️  No WAF Web ACLs found with prefix: $PREFIX"
          else
            echo "$WAFS" | while IFS='|' read -r waf_id waf_name lock_token; do
              echo "📍 WAF: $waf_name"
              
              ATTACHED=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                        jq -r ".DistributionList.Items[]? | select(.WebACLId | contains(\"$waf_id\")) | .Id" | head -1)
              
              if [ -n "$ATTACHED" ]; then
                echo "   ⏳ Still attached to CloudFront $ATTACHED, will retry later"
              else
                echo "   Deleting..."
                aws wafv2 delete-web-acl \
                  --name "$waf_name" \
                  --scope CLOUDFRONT \
                  --id "$waf_id" \
                  --lock-token "$lock_token" \
                  --region us-east-1 2>&1 | grep -v "error" && \
                echo "   ✅ Deleted" || echo "   ⚠️  Could not delete"
              fi
            done
          fi

      - name: "Wait for CloudFront Distributions"
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⏳ WAITING: CloudFront Distributions to Fully Disable"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "This may take 10-15 minutes. Checking every 60 seconds..."
          echo ""
          
          MAX_WAIT=900
          ELAPSED=0
          FOUND_DISTRIBUTIONS=false
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            DIST_IDS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                      jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PREFIX\")) | .Id" 2>/dev/null || true)
            
            if [ -z "$DIST_IDS" ]; then
              if [ "$FOUND_DISTRIBUTIONS" = "false" ] && [ $ELAPSED -eq 0 ]; then
                echo "ℹ️  No distributions found with prefix: $PREFIX"
              else
                echo "✅ All distributions have been deleted"
              fi
              break
            fi
            
            FOUND_DISTRIBUTIONS=true
            ALL_DISABLED=true
            
            for dist_id in $DIST_IDS; do
              STATUS=$(aws cloudfront get-distribution --id "$dist_id" --query 'Distribution.Status' --output text 2>/dev/null || echo "Unknown")
              ENABLED=$(aws cloudfront get-distribution --id "$dist_id" --query 'Distribution.DistributionConfig.Enabled' --output text 2>/dev/null || echo "Unknown")
              
              echo "   $dist_id: Status=$STATUS, Enabled=$ENABLED"
              
              if [ "$ENABLED" = "True" ] || [ "$STATUS" = "InProgress" ]; then
                ALL_DISABLED=false
              fi
            done
            
            if [ "$ALL_DISABLED" = "true" ]; then
              echo ""
              echo "✅ All distributions are disabled and deployed"
              break
            fi
            
            sleep 60
            ELAPSED=$((ELAPSED + 60))
            echo "   Waited ${ELAPSED}s / ${MAX_WAIT}s..."
          done
          
          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "⚠️  Maximum wait time reached. Some distributions may still be deploying."
          fi

      - name: "Step 9: Delete CloudFront Distributions"
        continue-on-error: true
        run: |
            PROJECT_NAME="${{ steps.scan.outputs.project_name }}"
            PREFIX="${{ steps.scan.outputs.prefix }}"
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "☁️  STEP 9: Deleting CloudFront Distributions"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "🔍 Using PROJECT_NAME: $PROJECT_NAME for detection"
            
            # Use the SAME detection logic as Step 1 and scan - by PROJECT_NAME in comment
            DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
              jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PROJECT_NAME\")) | \"\(.Id)|\(.Comment)|\(.Status)\"" 2>/dev/null || true)
            
            if [ -z "$DISTRIBUTIONS" ]; then
              echo "❌ No distributions found by comment. Trying origin domain detection..."
              # Fallback: detect by origin domain
              DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                jq -r ".DistributionList.Items[]? | .Id as \$id | .Comment as \$comment | .Origins.Items[]? | select(.DomainName != null) | select(.DomainName | contains(\"$PREFIX\")) | \"\$id|\$comment|unknown\"" 2>/dev/null || true)
            fi
            
            if [ -z "$DISTRIBUTIONS" ]; then
              echo "❌ No CloudFront distributions found for deletion."
              echo "💡 Manual deletion may be required for: E191G2X7VOQUCR, E39ARSICL9MJ2Q, E2D8L23FW0GDEQ, E35EJ3YWAN0M0S, E2T09YD9M9AYYO"
            else
              echo "📍 Found distributions for deletion:"
              echo "$DISTRIBUTIONS" | while IFS='|' read -r dist_id comment status; do
                echo "   🔸 $dist_id - $comment (Status: $status)"
              done
              echo ""
              
              echo "🗑️  Deleting CloudFront distributions..."
              echo "$DISTRIBUTIONS" | while IFS='|' read -r dist_id comment status; do
                echo "📍 Deleting: $dist_id ($comment)"
                
                # Get the ETag and delete
                ETAG=$(aws cloudfront get-distribution --id "$dist_id" --query 'ETag' --output text 2>/dev/null)
                if [ -n "$ETAG" ]; then
                  # Attempt deletion
                  if aws cloudfront delete-distribution --id "$dist_id" --if-match "$ETAG" 2>/dev/null; then
                    echo "   ✅ Deletion initiated successfully"
                  else
                    # Check if it's still deploying
                    CURRENT_STATUS=$(aws cloudfront get-distribution --id "$dist_id" --query 'Distribution.Status' --output text 2>/dev/null || echo "Unknown")
                    if [ "$CURRENT_STATUS" = "InProgress" ]; then
                      echo "   ⏳ Still deploying, will be deleted on next run"
                    else
                      echo "   ❌ Failed to delete (Status: $CURRENT_STATUS)"
                    fi
                  fi
                else
                  echo "   ❌ Could not get ETag for distribution"
                fi
              done
              
              echo ""
              echo "📝 Note: CloudFront deletions can take 15-20 minutes to complete."
              echo "   The distributions will disappear from the console when fully deleted."
            fi
            
      - name: "Verify CloudFront Deletion"
        continue-on-error: true
        run: |
            PROJECT_NAME="${{ steps.scan.outputs.project_name }}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✅ VERIFY: CloudFront Deletion Status"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            
            # Check remaining distributions
            REMAINING_DISTRIBUTIONS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
              jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PROJECT_NAME\")) | \"\(.Id)|\(.Comment)|\(.Status)\"" 2>/dev/null || true)
            
            if [ -z "$REMAINING_DISTRIBUTIONS" ]; then
              echo "🎉 SUCCESS: All CloudFront distributions have been deleted!"
            else
              echo "⚠️  Some distributions are still present:"
              echo "$REMAINING_DISTRIBUTIONS" | while IFS='|' read -r dist_id comment status; do
                echo "   🔸 $dist_id - $comment (Status: $status)"
              done
              echo ""
              echo "💡 CloudFront deletions can take 15-20 minutes. Run this workflow again if needed."
            fi

      - name: "Step 10: Retry WAF Deletion"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🛡️  STEP 10: Retrying WAF Deletion (After CloudFront)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          WAFS=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | \
            jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)|\(.LockToken)\"" 2>/dev/null || true)
          
          if [ -z "$WAFS" ]; then
            echo "ℹ️  No WAF Web ACLs found with prefix: $PREFIX"
          else
            echo "$WAFS" | while IFS='|' read -r waf_id waf_name lock_token; do
              echo "📍 WAF: $waf_name"
              aws wafv2 delete-web-acl \
                --name "$waf_name" \
                --scope CLOUDFRONT \
                --id "$waf_id" \
                --lock-token "$lock_token" \
                --region us-east-1 2>&1 | grep -v "error" && \
              echo "   ✅ Deleted" || echo "   ⚠️  Could not delete"
            done
          fi

      - name: "Step 11: Retry Response Headers Policies and OAC"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 STEP 11: Retrying Policies and OAC Deletion"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Retry Response Headers Policies
          echo "📋 Response Headers Policies:"
          RHP=$(aws cloudfront list-response-headers-policies --type custom --output json 2>/dev/null | \
            jq -r ".ResponseHeadersPolicyList.Items[]? | select(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name | contains(\"$PREFIX\")) | \"\(.ResponseHeadersPolicy.Id)|\(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name)\"" 2>/dev/null || true)
          
          if [ -n "$RHP" ]; then
            echo "$RHP" | while IFS='|' read -r policy_id policy_name; do
              echo "📍 Policy: $policy_name"
              ETAG=$(aws cloudfront get-response-headers-policy --id "$policy_id" --query 'ETag' --output text 2>/dev/null)
              aws cloudfront delete-response-headers-policy --id "$policy_id" --if-match "$ETAG" 2>&1 | grep -v "error" && \
              echo "   ✅ Deleted" || echo "   ⚠️  Still in use or could not delete"
            done
          else
            echo "ℹ️  No Response Headers Policies found"
          fi
          
          echo ""
          
          # Retry Origin Access Controls
          echo "🔒 Origin Access Controls:"
          OAC=$(aws cloudfront list-origin-access-controls --output json 2>/dev/null | \
            jq -r ".OriginAccessControlList.Items[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)\"" 2>/dev/null || true)
          
          if [ -n "$OAC" ]; then
            echo "$OAC" | while IFS='|' read -r oac_id oac_name; do
              echo "📍 OAC: $oac_name"
              ETAG=$(aws cloudfront get-origin-access-control --id "$oac_id" --query 'ETag' --output text 2>/dev/null)
              aws cloudfront delete-origin-access-control --id "$oac_id" --if-match "$ETAG" 2>&1 | grep -v "error" && \
              echo "   ✅ Deleted" || echo "   ⚠️  Still in use or could not delete"
            done
          else
            echo "ℹ️  No Origin Access Controls found"
          fi

      - name: Cleanup Terraform State
        working-directory: ${{ steps.detect.outputs.dir }}
        continue-on-error: true
        run: |
          if [ -f "terraform.tfstate" ] || [ -f ".terraform/terraform.tfstate" ]; then
            echo "🧹 Cleaning local Terraform state..."
            rm -f terraform.tfstate*
            rm -f .terraform.lock.hcl
            rm -rf .terraform/
            echo "✅ Local state cleaned"
          else
            echo "ℹ️  No local state found"
          fi

      - name: Final Summary
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          
          echo "## ✅ Destruction Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Prefix:** $PREFIX" >> $GITHUB_STEP_SUMMARY
          echo "**Completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔍 Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Checking for remaining resources..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          CF_REMAIN=$(aws cloudfront list-distributions --output json 2>/dev/null | jq -r ".DistributionList.Items[]? | select(.Comment != null) | select(.Comment | contains(\"$PREFIX\")) | .Id" | wc -l)
          WAF_REMAIN=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          S3_REMAIN=$(aws s3api list-buckets --output json 2>/dev/null | jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          RHP_REMAIN=$(aws cloudfront list-response-headers-policies --type custom --output json 2>/dev/null | jq -r ".ResponseHeadersPolicyList.Items[]? | select(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name | contains(\"$PREFIX\")) | .ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name" | wc -l)
          OAC_REMAIN=$(aws cloudfront list-origin-access-controls --output json 2>/dev/null | jq -r ".OriginAccessControlList.Items[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          
          echo "| Resource Type | Remaining |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront Distributions | $CF_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| WAF Web ACLs | $WAF_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Buckets | $S3_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| Response Headers Policies | $RHP_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| Origin Access Controls | $OAC_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_REMAIN=$((CF_REMAIN + WAF_REMAIN + S3_REMAIN + RHP_REMAIN + OAC_REMAIN))
          
          if [ $TOTAL_REMAIN -eq 0 ]; then
            echo "### 🎉 Success!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️  Some Resources Remain" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some resources may still be in the process of deletion." >> $GITHUB_STEP_SUMMARY
            echo "CloudFront distributions can take 15-20 minutes to fully delete." >> $GITHUB_STEP_SUMMARY
            echo "Response Headers Policies and OACs will be deleted after their associated CloudFront distributions are gone." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "You can run this workflow again to clean up any remaining resources." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can redeploy anytime using the Deploy Infrastructure workflow." >> $GITHUB_STEP_SUMMARY