name: 💥 Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read

jobs:
  destroy:
    name: 💥 Destroy All Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ You must type DESTROY exactly to confirm"
            exit 1
          fi
          echo "✅ Destruction confirmed"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Detect Terraform Directory
        id: detect
        run: |
          if [ -f "main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          else
            echo "dir=." >> $GITHUB_OUTPUT
          fi

      - name: Scan for Resources to Destroy
        id: scan
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            PREFIX="secure-website-production"
          else
            PREFIX="secure-website-staging"
          fi
          
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT
          
          echo "## 💥 Scanning for Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Prefix:** $PREFIX" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Type | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced CloudFront detection
          CF_COUNT=$(aws cloudfront list-distributions --output json 2>/dev/null | jq -r ".DistributionList.Items[]? | select(.Comment | contains(\"$PREFIX\") or .Aliases.Items[]? | contains(\"$PREFIX\")) | .Id" | wc -l)
          echo "| CloudFront Distributions | $CF_COUNT | Will be disabled then deleted |" >> $GITHUB_STEP_SUMMARY
          
          WAF_COUNT=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          echo "| WAF Web ACLs | $WAF_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          S3_COUNT=$(aws s3api list-buckets --output json 2>/dev/null | jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          echo "| S3 Buckets | $S3_COUNT | Will be emptied and deleted |" >> $GITHUB_STEP_SUMMARY
          
          OAC_COUNT=$(aws cloudfront list-origin-access-controls --output json 2>/dev/null | jq -r ".OriginAccessControlList.Items[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          echo "| Origin Access Controls | $OAC_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          RHP_COUNT=$(aws cloudfront list-response-headers-policies --type custom --output json 2>/dev/null | jq -r ".ResponseHeadersPolicyList.Items[]? | select(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name | contains(\"$PREFIX\")) | .ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name" | wc -l)
          echo "| Response Headers Policies | $RHP_COUNT | Will be deleted |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: "Step 1: Disable CloudFront Distributions"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "☁️  STEP 1: Disabling CloudFront Distributions"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Enhanced CloudFront detection with better filtering
          aws cloudfront list-distributions --output json 2>/dev/null | \
          jq -r ".DistributionList.Items[]? | select(.Comment | contains(\"$PREFIX\") or .Aliases.Items[]? | contains(\"$PREFIX\")) | \"\(.Id)|\(.Comment)|\(.Enabled)\"" | \
          while IFS='|' read -r dist_id comment enabled; do
            echo "📍 Distribution: $dist_id ($comment)"
            
            if [ "$enabled" = "true" ]; then
              echo "   Disabling..."
              aws cloudfront get-distribution-config --id "$dist_id" > /tmp/cf_$dist_id.json 2>/dev/null
              ETAG=$(jq -r '.ETag' /tmp/cf_$dist_id.json)
              jq '.DistributionConfig.Enabled = false' /tmp/cf_$dist_id.json > /tmp/cf_disabled_$dist_id.json
              
              aws cloudfront update-distribution \
                --id "$dist_id" \
                --if-match "$ETAG" \
                --distribution-config "$(jq -c '.DistributionConfig' /tmp/cf_disabled_$dist_id.json)" \
                2>/dev/null && echo "   ✅ Disabled" || echo "   ⚠️  Already disabled"
            else
              echo "   ✅ Already disabled"
            fi
          done
          
          echo ""
          echo "⏳ Waiting 30 seconds for distributions to start disabling..."
          sleep 30

      - name: "Step 2: Empty and Delete S3 Buckets"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 STEP 2: Emptying and Deleting S3 Buckets"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          aws s3api list-buckets --output json 2>/dev/null | \
          jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | \
          while read -r bucket; do
            echo "📍 Bucket: $bucket"
            echo "   Emptying all objects and versions..."
            
            # More robust bucket emptying
            aws s3api list-object-versions --bucket "$bucket" --output json 2>/dev/null | \
            jq -r '.Versions[]?, .DeleteMarkers[]? | select(.Key) | "\(.Key)\t\(.VersionId)"' | \
            while IFS=$'\t' read -r key version; do
              if [ -n "$key" ]; then
                aws s3api delete-object --bucket "$bucket" --key "$key" --version-id "$version" 2>/dev/null || true
              fi
            done
            
            # Alternative method for bucket emptying
            aws s3 rm "s3://$bucket" --recursive --quiet 2>/dev/null || true
            
            echo "   Deleting bucket..."
            aws s3 rb "s3://$bucket" --force 2>&1 && \
            echo "   ✅ Deleted" || echo "   ⚠️  Could not delete (may need manual cleanup)"
          done

      - name: "Step 3: Delete WAF Web ACLs - First Attempt"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🛡️  STEP 3: Deleting WAF Web ACLs (First Attempt)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | \
          jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)|\(.LockToken)\"" | \
          while IFS='|' read -r waf_id waf_name lock_token; do
            echo "📍 WAF: $waf_name"
            
            ATTACHED=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                      jq -r ".DistributionList.Items[]? | select(.WebACLId | contains(\"$waf_id\")) | .Id" | head -1)
            
            if [ -n "$ATTACHED" ]; then
              echo "   ⏳ Still attached to CloudFront $ATTACHED, will retry later"
            else
              echo "   Deleting..."
              aws wafv2 delete-web-acl \
                --name "$waf_name" \
                --scope CLOUDFRONT \
                --id "$waf_id" \
                --lock-token "$lock_token" \
                --region us-east-1 2>&1 && \
              echo "   ✅ Deleted" || echo "   ⚠️  Could not delete (will retry)"
            fi
          done

      # ... (Steps 4-8 remain the same as your original)

      - name: "Wait for CloudFront Distributions"
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⏳ WAITING: CloudFront Distributions to Fully Disable"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "This may take 10-15 minutes. Checking every 60 seconds..."
          echo ""
          
          MAX_WAIT=900
          ELAPSED=0
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # Enhanced CloudFront detection
            DIST_IDS=$(aws cloudfront list-distributions --output json 2>/dev/null | \
                      jq -r ".DistributionList.Items[]? | select(.Comment | contains(\"$PREFIX\") or .Aliases.Items[]? | contains(\"$PREFIX\")) | .Id")
            
            if [ -z "$DIST_IDS" ]; then
              echo "✅ No distributions found"
              break
            fi
            
            ALL_DISABLED=true
            for dist_id in $DIST_IDS; do
              STATUS=$(aws cloudfront get-distribution --id "$dist_id" --query 'Distribution.Status' --output text 2>/dev/null)
              ENABLED=$(aws cloudfront get-distribution --id "$dist_id" --query 'Distribution.DistributionConfig.Enabled' --output text 2>/dev/null)
              
              echo "   $dist_id: Status=$STATUS, Enabled=$ENABLED"
              
              if [ "$ENABLED" = "True" ] || [ "$STATUS" = "InProgress" ]; then
                ALL_DISABLED=false
              fi
            done
            
            if [ "$ALL_DISABLED" = "true" ]; then
              echo ""
              echo "✅ All distributions are disabled and deployed"
              break
            fi
            
            sleep 60
            ELAPSED=$((ELAPSED + 60))
            echo "   Waited ${ELAPSED}s / ${MAX_WAIT}s..."
          done

      - name: "Step 9: Delete CloudFront Distributions"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "☁️  STEP 9: Deleting CloudFront Distributions"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Enhanced CloudFront detection
          aws cloudfront list-distributions --output json 2>/dev/null | \
          jq -r ".DistributionList.Items[]? | select(.Comment | contains(\"$PREFIX\") or .Aliases.Items[]? | contains(\"$PREFIX\")) | \"\(.Id)|\(.Comment)\"" | \
          while IFS='|' read -r dist_id comment; do
            echo "📍 Distribution: $dist_id ($comment)"
            ETAG=$(aws cloudfront get-distribution --id "$dist_id" --query 'ETag' --output text 2>/dev/null)
            aws cloudfront delete-distribution --id "$dist_id" --if-match "$ETAG" 2>&1 && \
            echo "   ✅ Deleted" || echo "   ⚠️  Could not delete (may still be deploying)"
          done

      - name: "Step 10: Delete Dependent Resources After CloudFront"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔧 STEP 10: Deleting Dependent Resources (After CloudFront)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          echo "📋 Deleting Response Headers Policies..."
          aws cloudfront list-response-headers-policies --type custom --output json 2>/dev/null | \
          jq -r ".ResponseHeadersPolicyList.Items[]? | select(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name | contains(\"$PREFIX\")) | \"\(.ResponseHeadersPolicy.Id)|\(.ResponseHeadersPolicy.ResponseHeadersPolicyConfig.Name)\"" | \
          while IFS='|' read -r policy_id policy_name; do
            echo "📍 Policy: $policy_name"
            ETAG=$(aws cloudfront get-response-headers-policy --id "$policy_id" --query 'ETag' --output text 2>/dev/null)
            aws cloudfront delete-response-headers-policy --id "$policy_id" --if-match "$ETAG" 2>&1 && \
            echo "   ✅ Deleted" || echo "   ⚠️  Could not delete"
          done
          
          echo ""
          echo "🔒 Deleting Origin Access Controls..."
          aws cloudfront list-origin-access-controls --output json 2>/dev/null | \
          jq -r ".OriginAccessControlList.Items[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)\"" | \
          while IFS='|' read -r oac_id oac_name; do
            echo "📍 OAC: $oac_name"
            ETAG=$(aws cloudfront get-origin-access-control --id "$oac_id" --query 'ETag' --output text 2>/dev/null)
            aws cloudfront delete-origin-access-control --id "$oac_id" --if-match "$ETAG" 2>&1 && \
            echo "   ✅ Deleted" || echo "   ⚠️  Could not delete"
          done

      - name: "Step 11: Final WAF Deletion"
        continue-on-error: true
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🛡️  STEP 11: Final WAF Deletion"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | \
          jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | \"\(.Id)|\(.Name)|\(.LockToken)\"" | \
          while IFS='|' read -r waf_id waf_name lock_token; do
            echo "📍 WAF: $waf_name"
            aws wafv2 delete-web-acl \
              --name "$waf_name" \
              --scope CLOUDFRONT \
              --id "$waf_id" \
              --lock-token "$lock_token" \
              --region us-east-1 2>&1 && \
            echo "   ✅ Deleted" || echo "   ⚠️  Could not delete"
          done

      - name: Cleanup Terraform State
        working-directory: ${{ steps.detect.outputs.dir }}
        continue-on-error: true
        run: |
          if [ -f "terraform.tfstate" ] || [ -f ".terraform/terraform.tfstate" ]; then
            echo "🧹 Cleaning local Terraform state..."
            rm -f terraform.tfstate*
            rm -f .terraform.lock.hcl
            rm -rf .terraform/
            echo "✅ Local state cleaned"
          else
            echo "ℹ️  No local state found"
          fi

      - name: Final Summary
        run: |
          PREFIX="${{ steps.scan.outputs.prefix }}"
          
          echo "## ✅ Destruction Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Prefix:** $PREFIX" >> $GITHUB_STEP_SUMMARY
          echo "**Completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔍 Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Checking for remaining resources..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          CF_REMAIN=$(aws cloudfront list-distributions --output json 2>/dev/null | jq -r ".DistributionList.Items[]? | select(.Comment | contains(\"$PREFIX\")) | .Id" | wc -l)
          WAF_REMAIN=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null | jq -r ".WebACLs[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          S3_REMAIN=$(aws s3api list-buckets --output json 2>/dev/null | jq -r ".Buckets[]? | select(.Name | contains(\"$PREFIX\")) | .Name" | wc -l)
          
          echo "| Resource Type | Remaining |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront Distributions | $CF_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| WAF Web ACLs | $WAF_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Buckets | $S3_REMAIN |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $CF_REMAIN -eq 0 ] && [ $WAF_REMAIN -eq 0 ] && [ $S3_REMAIN -eq 0 ]; then
            echo "### 🎉 Success!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️  Some Resources Remain" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some resources may still be in the process of deletion." >> $GITHUB_STEP_SUMMARY
            echo "CloudFront distributions can take 15-20 minutes to fully delete." >> $GITHUB_STEP_SUMMARY
            echo "You can run this workflow again to clean up any remaining resources." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can redeploy anytime using the Deploy Infrastructure workflow." >> $GITHUB_STEP_SUMMARY