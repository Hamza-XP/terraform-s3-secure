name: 💥 Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read

jobs:
  destroy:
    name: 💥 Destroy All Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: ⚠️ Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ You must type DESTROY exactly"
            exit 1
          fi
          echo "✅ Confirmation validated"

      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Detect Directory
        id: detect
        run: |
          if [ -f "main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          else
            echo "❌ Cannot find main.tf"
            exit 1
          fi

      - name: 📂 Prepare Config
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          if [ ! -f terraform.tfvars ]; then
            cat > terraform.tfvars << 'EOF'
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website"
          environment       = "production"
          allowed_countries = ["US", "CA", "GB"]
          EOF
          fi

      - name: 🔧 Init
        working-directory: ${{ steps.detect.outputs.dir }}
        run: terraform init

      - name: 📋 List Resources
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          echo "## 💥 Resources to be Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          WB=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "N/A")
          LB=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "N/A")
          DIST=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "N/A")
          
          echo "| Resource | Name |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Website Bucket | $WB |" >> $GITHUB_STEP_SUMMARY
          echo "| Logs Bucket | $LB |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront | $DIST |" >> $GITHUB_STEP_SUMMARY
          echo "| WAF | Will be removed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🗑️ Empty S3 Buckets
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          echo "🗑️ Emptying S3 buckets..."
          
          WB=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          LB=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "")
          
          empty_bucket() {
            local bucket=$1
            if [ -n "$bucket" ] && [ "$bucket" != "N/A" ]; then
              echo "  Emptying: $bucket"
              aws s3 rm s3://$bucket --recursive || true
              
              # Delete versions
              aws s3api list-object-versions --bucket $bucket --output json 2>/dev/null | \
              jq -r '.Versions[]? | "--key \"" + .Key + "\" --version-id \"" + .VersionId + "\""' | \
              xargs -I {} sh -c "aws s3api delete-object --bucket $bucket {} || true"
              
              # Delete markers
              aws s3api list-object-versions --bucket $bucket --output json 2>/dev/null | \
              jq -r '.DeleteMarkers[]? | "--key \"" + .Key + "\" --version-id \"" + .VersionId + "\""' | \
              xargs -I {} sh -c "aws s3api delete-object --bucket $bucket {} || true"
            fi
          }
          
          empty_bucket "$WB"
          empty_bucket "$LB"
          
          echo "✅ Buckets emptied"

      - name: 💥 Terraform Destroy
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          echo "💥 Destroying infrastructure..."
          terraform destroy -auto-approve
          echo "✅ Destruction complete"

      - name: 📊 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Infrastructure Destroyed
          
          All resources have been successfully removed:
          
          - ✅ S3 Buckets deleted
          - ✅ CloudFront Distribution deleted
          - ✅ WAF Web ACL deleted
          - ✅ CloudWatch Dashboard deleted
          
          You can redeploy anytime by pushing to main branch.
          EOF