name: 🚀 Deploy Infrastructure

on:
  push:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'website/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  # Set this to '.' if files are in root, or './terraform' if in subdirectory
  TF_WORKING_DIR: '.'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  setup:
    name: 🔍 Detect Project Structure
    runs-on: ubuntu-latest
    outputs:
      tf_dir: ${{ steps.detect.outputs.tf_dir }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Detect Terraform Directory
        id: detect
        run: |
          echo "🔍 Detecting Terraform files location..."
          
          if [ -f "main.tf" ]; then
            echo "✅ Found Terraform files in root directory"
            echo "tf_dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "✅ Found Terraform files in terraform/ subdirectory"
            echo "tf_dir=./terraform" >> $GITHUB_OUTPUT
          else
            echo "❌ ERROR: Cannot find main.tf in root or terraform/ directory"
            echo "📂 Current directory structure:"
            ls -la
            echo ""
            echo "📂 Looking for .tf files:"
            find . -name "*.tf" -type f
            exit 1
          fi

  validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      tf-fmt: ${{ steps.fmt.outcome }}
      tf-validate: ${{ steps.validate.outcome }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 📂 Show Structure
        run: |
          echo "Working directory: ${{ needs.setup.outputs.tf_dir }}"
          ls -la ${{ needs.setup.outputs.tf_dir }}

      - name: 🎨 Terraform Format Check
        id: fmt
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init -backend=false

      - name: ✅ Terraform Validate
        id: validate
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform validate

      - name: 📊 Comment PR - Validation
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const output = `
            ## 🔍 Terraform Validation Results
            
            **Working Directory:** \`${{ needs.setup.outputs.tf_dir }}\`
            
            | Check | Result |
            |-------|--------|
            | Format | ${{ steps.fmt.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Validate | ${{ steps.validate.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [setup, validate]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ needs.setup.outputs.tf_dir }}
          framework: terraform
          soft_fail: true
        continue-on-error: true

  plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: [setup, validate, security-scan]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ steps.outputs.outputs.cloudfront_domain }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📂 Create terraform.tfvars
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          if [ ! -f terraform.tfvars ]; then
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << 'EOF'
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website"
          environment       = "production"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init

      - name: 📋 Terraform Plan
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform plan -out=tfplan

  apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: [setup, validate, security-scan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ steps.outputs.outputs.cloudfront_domain }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📂 Create terraform.tfvars
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          if [ ! -f terraform.tfvars ]; then
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << 'EOF'
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website-${{ github.run_number }}"
          environment       = "production"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init

      - name: 📋 Terraform Plan
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform plan -out=tfplan

      - name: 🚀 Terraform Apply
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform apply -auto-approve tfplan

      - name: 📤 Get Outputs
        id: outputs
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          echo "website_url=$(terraform output -raw website_url 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT

      - name: 📁 Upload Website Files
        run: |
          BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          if [ "$BUCKET" = "N/A" ]; then
            echo "⚠️ Bucket not available"
            exit 0
          fi
          
          # Create default website if needed
          if [ ! -d "website" ]; then
            mkdir -p website
            cat > website/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Deployed!</title>
              <style>
                  body {
                      font-family: system-ui, -apple-system, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                  }
                  .card {
                      text-align: center;
                      padding: 3rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 15px;
                      backdrop-filter: blur(10px);
                      box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                  }
                  h1 { margin: 0 0 1rem; font-size: 2.5rem; }
                  p { margin: 0.5rem 0; opacity: 0.9; }
                  .badges { margin: 2rem 0; }
                  .badge {
                      display: inline-block;
                      padding: 0.5rem 1rem;
                      margin: 0.25rem;
                      background: rgba(255, 255, 255, 0.2);
                      border-radius: 20px;
                      font-size: 0.9rem;
                  }
              </style>
          </head>
          <body>
              <div class="card">
                  <h1>🚀 Website Deployed!</h1>
                  <p>Your secure infrastructure is live</p>
                  <div class="badges">
                      <span class="badge">✅ HTTPS</span>
                      <span class="badge">🛡️ WAF Protected</span>
                      <span class="badge">📊 Monitored</span>
                      <span class="badge">☁️ CloudFront</span>
                  </div>
                  <p style="font-size: 0.85rem; margin-top: 2rem;">
                      Build #${{ github.run_number }} • GitHub Actions
                  </p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Upload files
          find website -name "*.html" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "text/html" \;
          find website -name "*.png" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "image/png" \;
          find website -name "*.jpg" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "image/jpeg" \;
          find website -name "*.css" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "text/css" \;
          find website -name "*.js" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "application/javascript" \;

      - name: 🔄 Invalidate Cache
        run: |
          DIST_ID="${{ steps.outputs.outputs.distribution_id }}"
          [ "$DIST_ID" != "N/A" ] && aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*" || true

      - name: 📊 Summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 Website URL | https://${{ steps.outputs.outputs.cloudfront_domain }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 S3 Bucket | ${{ steps.outputs.outputs.s3_bucket }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔖 Distribution | ${{ steps.outputs.outputs.distribution_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📂 Terraform Dir | ${{ needs.setup.outputs.tf_dir }} |" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: 💥 Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init

      - name: 🗑️ Empty Buckets
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        continue-on-error: true
        run: |
          wb=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          lb=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "")
          [ -n "$wb" ] && aws s3 rm s3://$wb --recursive || true
          [ -n "$lb" ] && aws s3 rm s3://$lb --recursive || true

      - name: 💥 Destroy
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform destroy -auto-approve

  monitor:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [setup, apply]
    if: success()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 📂 Restore Config
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          [ ! -f terraform.tfvars ] && cp terraform.tfvars.example terraform.tfvars || true

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init

      - name: 📊 Enhanced Deployment Summary
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          echo "## 📊 Deployment Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Status | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          DIST=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "N/A")
          DOMAIN=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "N/A")
          BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "N/A")
          WAF=$(terraform output -raw waf_web_acl_arn 2>/dev/null || echo "N/A")
          DASHBOARD=$(terraform output -raw dashboard_url 2>/dev/null || echo "N/A")
          
          echo "| 🌐 CloudFront | ✅ Deployed | $DIST |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 S3 Bucket | ✅ Deployed | $BUCKET |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ WAF ACL | ✅ Deployed | $(echo $WAF | cut -d'/' -f2-) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧪 Health Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DOMAIN" != "N/A" ]; then
            URL="https://$DOMAIN"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$URL" 2>/dev/null || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "| 🌐 Website Access | ✅ Success | HTTP $HTTP_CODE |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 🌐 Website Access | ⏳ Propagating | Wait 5-10 minutes |" >> $GITHUB_STEP_SUMMARY
            fi
            
            HEADERS=$(curl -sI "$URL" --max-time 10 2>/dev/null || echo "")
            if echo "$HEADERS" | grep -qi "strict-transport-security"; then
              echo "| 🔒 Security Headers | ✅ Configured | HSTS enabled |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 🔒 Security Headers | ⏳ Propagating | Will appear shortly |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Monitoring & Management" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Console Link |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ☁️ CloudFront | [View Distribution](https://console.aws.amazon.com/cloudfront/v3/home#/distributions/$DIST) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 S3 Bucket | [View Bucket](https://s3.console.aws.amazon.com/s3/buckets/$BUCKET) |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DASHBOARD" != "N/A" ]; then
            echo "| 📊 CloudWatch | [View Dashboard]($DASHBOARD) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| 🔐 WAF & Shield | [View Web ACLs](https://console.aws.amazon.com/wafv2/homev2/web-acls?region=global) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Your Website" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎉 Access your website at:** https://$DOMAIN" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Note:** CloudFront can take 10-15 minutes to fully propagate worldwide." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Test your website using the CloudFront URL" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Monitor performance via CloudWatch dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Review security settings in WAF console" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Upload custom content to S3 bucket" >> $GITHUB_STEP_SUMMARY
