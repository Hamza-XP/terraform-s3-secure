name: 🚀 Deploy Infrastructure

on:
  push:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'website/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest
    outputs:
      tf-fmt: ${{ steps.fmt.outcome }}
      tf-validate: ${{ steps.validate.outcome }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 📂 List Files (Debug)
        run: |
          echo "Current directory:"
          pwd
          echo "Files in root:"
          ls -la
          echo "Looking for .tf files:"
          find . -name "*.tf" -type f

      - name: 🎨 Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: 🔧 Terraform Init
        run: terraform init -backend=false

      - name: ✅ Terraform Validate
        id: validate
        run: terraform validate

      - name: 📊 Comment PR - Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const output = `
            ## 🔍 Terraform Validation Results
            
            | Check | Result |
            |-------|--------|
            | Format | ${{ steps.fmt.outcome == 'success' && '✅ Passed' || '❌ Failed - Run \`terraform fmt -recursive\`' }} |
            | Validate | ${{ steps.validate.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            <details><summary>Show Details</summary>
            
            ### Terraform Format
            \`\`\`
            ${{ steps.fmt.outputs.stdout }}
            ${{ steps.fmt.outputs.stderr }}
            \`\`\`
            
            ### Terraform Validate
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            ${{ steps.validate.outputs.stderr }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
          soft_fail: true
        continue-on-error: true

      - name: 📊 Upload Checkov Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: checkov-results.sarif

      - name: 🧩 Install TFSec
        run: |
          wget -q https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec-linux-amd64
          sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec

      - name: 🔍 Run TFSec
        run: |
          tfsec --format sarif --out tfsec-results.sarif . || true
        continue-on-error: true

      - name: 📊 Upload TFSec Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: tfsec-results.sarif

  plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    outputs:
      tf-plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ✅ Verify AWS Connection
        run: |
          aws sts get-caller-identity
          echo "AWS connection successful"

      - name: 📂 Create terraform.tfvars if missing
        run: |
          if [ ! -f terraform.tfvars ]; then
            echo "Creating terraform.tfvars from example..."
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << EOF
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website"
          environment       = "production"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        run: terraform init

      - name: 📋 Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -detailed-exitcode -no-color -out=tfplan
          exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          exit 0

      - name: 📊 Comment PR - Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let planOutput = '';
            try {
              planOutput = execSync('terraform show -no-color tfplan', {encoding: 'utf8'});
            } catch (error) {
              planOutput = 'Error reading plan output: ' + error.message;
            }
            
            const maxLength = 65000;
            if (planOutput.length > maxLength) {
              planOutput = planOutput.substring(0, maxLength) + '\n\n... (truncated)';
            }
            
            const exitCode = '${{ steps.plan.outputs.exitcode }}';
            let planResult = '';
            
            if (exitCode === '0') {
              planResult = '✅ No changes detected';
            } else if (exitCode === '2') {
              planResult = '📝 Changes detected';
            } else {
              planResult = '❌ Plan failed';
            }
            
            const output = `
            ## 📋 Terraform Plan Results
            
            **Result:** ${planResult}
            **Exit Code:** ${exitCode}
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            
            </details>
            
            **Next Steps:**
            ${exitCode === '2' ? '- Review the changes above\n- Merge this PR to apply changes' : ''}
            ${exitCode === '1' ? '- Fix the plan errors before merging' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: 💾 Upload Plan Artifact
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 5

  apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.outputs.outputs.website_url }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ✅ Verify AWS Connection
        run: |
          aws sts get-caller-identity
          echo "AWS connection successful"

      - name: 📂 Create terraform.tfvars if missing
        run: |
          if [ ! -f terraform.tfvars ]; then
            echo "Creating terraform.tfvars..."
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << EOF
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website-${{ github.run_number }}"
          environment       = "${{ github.event.inputs.environment || 'production' }}"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        run: terraform init

      - name: 📋 Terraform Plan
        run: terraform plan -out=tfplan

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: 📤 Get Terraform Outputs
        id: outputs
        run: |
          echo "website_url=$(terraform output -raw website_url || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id || echo 'N/A')" >> $GITHUB_OUTPUT

      - name: 📁 Upload Website Files
        run: |
          BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          if [ "$BUCKET" = "N/A" ] || [ -z "$BUCKET" ]; then
            echo "⚠️ S3 bucket name not available"
            exit 0
          fi
          
          if [ ! -d "website" ]; then
            echo "Creating default website..."
            mkdir -p website
            cat > website/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Secure Website</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                  }
                  .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 10px;
                      backdrop-filter: blur(10px);
                  }
                  h1 { margin: 0 0 1rem 0; }
                  .badge { 
                      display: inline-block;
                      padding: 0.5rem 1rem;
                      background: rgba(255, 255, 255, 0.2);
                      border-radius: 5px;
                      margin: 0.5rem;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🚀 Secure Website Deployed!</h1>
                  <p>Your infrastructure is live and protected.</p>
                  <div class="badge">✅ HTTPS</div>
                  <div class="badge">🛡️ WAF</div>
                  <div class="badge">📊 Monitored</div>
              </div>
          </body>
          </html>
          EOF
          fi
          
          echo "📁 Uploading files..."
          find website -name "*.html" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "text/html" \;
          find website -name "*.png" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "image/png" \;
          find website -name "*.jpg" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "image/jpeg" \;
          find website -name "*.css" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "text/css" \;
          find website -name "*.js" -type f -exec aws s3 cp {} s3://$BUCKET/ --content-type "application/javascript" \;
          echo "✅ Upload complete"

      - name: 🔄 Invalidate CloudFront Cache
        run: |
          DIST_ID="${{ steps.outputs.outputs.distribution_id }}"
          if [ "$DIST_ID" != "N/A" ] && [ -n "$DIST_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
            echo "✅ Cache invalidated"
          fi

      - name: 🧪 Run Health Checks
        run: |
          DOMAIN="${{ steps.outputs.outputs.cloudfront_domain }}"
          if [ "$DOMAIN" = "N/A" ] || [ -z "$DOMAIN" ]; then
            exit 0
          fi
          
          sleep 60
          url="https://$DOMAIN"
          
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$url" || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Website accessible"
              break
            fi
            [ $i -lt 5 ] && sleep 30
          done

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Website URL | https://${{ steps.outputs.outputs.cloudfront_domain }} |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Bucket | ${{ steps.outputs.outputs.s3_bucket }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Distribution ID | ${{ steps.outputs.outputs.distribution_id }} |" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: 💥 Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📂 Create terraform.tfvars if missing
        run: |
          [ ! -f terraform.tfvars ] && cp terraform.tfvars.example terraform.tfvars || true

      - name: 🔧 Terraform Init
        run: terraform init

      - name: 🗑️ Empty S3 Buckets
        continue-on-error: true
        run: |
          website_bucket=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          logs_bucket=$(terraform output -raw logs_bucket_name 2>/dev/null || echo "")
          
          [ -n "$website_bucket" ] && aws s3 rm s3://$website_bucket --recursive || true
          [ -n "$logs_bucket" ] && aws s3 rm s3://$logs_bucket --recursive || true

      - name: 💥 Terraform Destroy
        run: terraform destroy -auto-approve

  monitor:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      # - name: 📧 Setup SNS Subscription (if needed)
      #   run: |
      #     sns_topic_arn=$(terraform output -raw sns_topic_arn)
          
      #     # Check if email subscription exists
      #     subscriptions=$(aws sns list-subscriptions-by-topic --topic-arn "$sns_topic_arn" --query 'Subscriptions[?Protocol==`email`]' --output text)
          
      #     if [ -z "$subscriptions" ]; then
      #       echo "⚠️ No email subscriptions found for alerts"
      #       echo "To receive alerts, subscribe to: $sns_topic_arn"
      #       echo "Run: aws sns subscribe --topic-arn $sns_topic_arn --protocol email --notification-endpoint your-email@example.com"
      #     else
      #       echo "✅ Email subscription exists for alerts"
      #     fi

      - name: 📂 Restore Config
        run: |
          [ ! -f terraform.tfvars ] && cp terraform.tfvars.example terraform.tfvars || true

      - name: 🔧 Terraform Init
        run: terraform init

      - name: 🔍 Basic Monitoring
        continue-on-error: true
        run: |
          DIST_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          [ -n "$DIST_ID" ] && echo "✅ CloudFront Distribution: $DIST_ID"
          
          BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          [ -n "$BUCKET" ] && echo "✅ S3 Bucket: $BUCKET"