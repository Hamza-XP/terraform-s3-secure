name: 🚀 Deploy Infrastructure

on:
  push:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'website/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [main, production]
    paths:
      - '**.tf'
      - '**.tfvars'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  setup:
    name: 🔍 Detect Project Structure
    runs-on: ubuntu-latest
    outputs:
      tf_dir: ${{ steps.detect.outputs.tf_dir }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Detect Terraform Directory
        id: detect
        run: |
          if [ -f "main.tf" ]; then
            echo "tf_dir=." >> $GITHUB_OUTPUT
          elif [ -f "terraform/main.tf" ]; then
            echo "tf_dir=./terraform" >> $GITHUB_OUTPUT
          else
            echo "❌ Cannot find main.tf"
            exit 1
          fi

  validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🎨 Format Check
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: 🔧 Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init -backend=false

      - name: ✅ Validate
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform validate

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [setup, validate]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ needs.setup.outputs.tf_dir }}
          framework: terraform
          soft_fail: true
        continue-on-error: true

  apply:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [setup, validate, security-scan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📂 Prepare Config
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          if [ ! -f terraform.tfvars ]; then
            if [ -f terraform.tfvars.example ]; then
              cp terraform.tfvars.example terraform.tfvars
            else
              cat > terraform.tfvars << 'EOF'
          use_custom_domain = false
          domain_name       = ""
          project_name      = "secure-website"
          environment       = "production"
          allowed_countries = ["US", "CA", "GB"]
          EOF
            fi
          fi

      - name: 🔧 Terraform Init
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: terraform init

      - name: 🔍 Detect WAF Resource Name
        id: detect_waf
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          # Check which WAF resource name is used in the Terraform files
          if grep -r "resource \"aws_wafv2_web_acl\" \"website\"" . >/dev/null 2>&1; then
            echo "waf_resource=aws_wafv2_web_acl.website" >> $GITHUB_OUTPUT
            echo "Found: aws_wafv2_web_acl.website"
          elif grep -r "resource \"aws_wafv2_web_acl\" \"main\"" . >/dev/null 2>&1; then
            echo "waf_resource=aws_wafv2_web_acl.main" >> $GITHUB_OUTPUT
            echo "Found: aws_wafv2_web_acl.main"
          else
            echo "waf_resource=aws_wafv2_web_acl.main" >> $GITHUB_OUTPUT
            echo "Defaulting to: aws_wafv2_web_acl.main"
          fi

      - name: 🧠 Smart Resource Manager
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        env:
          WAF_RESOURCE: ${{ steps.detect_waf.outputs.waf_resource }}
        run: |
          set +e  # Don't exit on errors
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🧠 SMART RESOURCE MANAGER - Auto Import & Reconcile"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Get config
          PROJECT=$(terraform console <<< "var.project_name" 2>/dev/null | tr -d '"' || echo "secure-website")
          ENV=$(terraform console <<< "var.environment" 2>/dev/null | tr -d '"' || echo "production")
          PREFIX="${PROJECT}-${ENV}"
          
          echo "📋 Configuration:"
          echo "   Project: $PROJECT"
          echo "   Environment: $ENV"
          echo "   Resource Prefix: $PREFIX"
          echo "   WAF Resource: $WAF_RESOURCE"
          echo ""
          
          # Universal import function
          universal_import() {
            local tf_resource=$1
            local aws_id=$2
            local name=$3
            
            if [ -z "$aws_id" ] || [ "$aws_id" = "null" ]; then
              echo "  ℹ️  $name - Not found in AWS (will be created)"
              return 1
            fi
            
            if terraform state show "$tf_resource" &>/dev/null; then
              echo "  ✅ $name - Already managed by Terraform"
              return 0
            fi
            
            echo "  🔄 $name - Attempting import..."
            if terraform import "$tf_resource" "$aws_id" 2>&1; then
              echo "  ✅ $name - Successfully imported!"
              return 0
            else
              echo "  ⚠️  $name - Import failed (will be created)"
              return 1
            fi
          }
          
          # S3 Buckets
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 S3 BUCKETS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          universal_import "aws_s3_bucket.website" "${PREFIX}-website" "Website Bucket"
          universal_import "aws_s3_bucket.logs" "${PREFIX}-logs" "Logs Bucket"
          
          # WAF - The problematic one
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🛡️  WAF WEB ACL (Smart Handler)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Check if WAF exists in AWS
          WAF_JSON=$(aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json 2>/dev/null || echo '{"WebACLs":[]}')
          WAF_EXISTS=$(echo "$WAF_JSON" | jq -r ".WebACLs[] | select(.Name==\"${PREFIX}-waf\") | .Name" 2>/dev/null)
          
          if [ -n "$WAF_EXISTS" ] && [ "$WAF_EXISTS" != "null" ]; then
            echo "  🔍 Found existing WAF in AWS: ${PREFIX}-waf"
            
            WAF_ID=$(echo "$WAF_JSON" | jq -r ".WebACLs[] | select(.Name==\"${PREFIX}-waf\") | .Id" 2>/dev/null)
            WAF_IMPORT_ID="${WAF_ID}/${PREFIX}-waf/CLOUDFRONT"
            
            # Try to import
            echo "  🔄 Attempting to import into Terraform state..."
            if terraform import "$WAF_RESOURCE" "$WAF_IMPORT_ID" 2>&1 | tee /tmp/waf_import.log; then
              echo "  ✅ WAF successfully imported!"
            else
              # Import failed - check if it's because resource already exists
              if grep -qi "already exists\|duplicate" /tmp/waf_import.log; then
                echo "  ⚠️  WAF exists but cannot be imported"
                echo "  🔄 Solution: Deleting and will recreate..."
                
                # Get lock token and delete
                LOCK_TOKEN=$(echo "$WAF_JSON" | jq -r ".WebACLs[] | select(.Name==\"${PREFIX}-waf\") | .LockToken" 2>/dev/null)
                
                if [ -n "$LOCK_TOKEN" ]; then
                  echo "  🗑️  Deleting existing WAF..."
                  
                  # First, check if it's attached to CloudFront
                  DIST_JSON=$(aws cloudfront list-distributions --output json 2>/dev/null || echo '{"DistributionList":{"Items":[]}}')
                  ATTACHED_DIST=$(echo "$DIST_JSON" | jq -r ".DistributionList.Items[] | select(.WebACLId | contains(\"${WAF_ID}\")) | .Id" 2>/dev/null)
                  
                  if [ -n "$ATTACHED_DIST" ]; then
                    echo "  ⚠️  WAF is attached to CloudFront distribution: $ATTACHED_DIST"
                    echo "  🔄 Detaching from CloudFront first..."
                    
                    # Get distribution config
                    aws cloudfront get-distribution-config --id "$ATTACHED_DIST" > /tmp/dist_config.json 2>/dev/null
                    ETAG=$(cat /tmp/dist_config.json | jq -r '.ETag')
                    
                    # Remove WAF from distribution
                    cat /tmp/dist_config.json | jq '.DistributionConfig.WebACLId = ""' > /tmp/dist_config_updated.json
                    
                    aws cloudfront update-distribution \
                      --id "$ATTACHED_DIST" \
                      --if-match "$ETAG" \
                      --distribution-config "$(cat /tmp/dist_config_updated.json | jq '.DistributionConfig')" 2>/dev/null || true
                    
                    echo "  ⏳ Waiting 10 seconds for detachment..."
                    sleep 10
                  fi
                  
                  # Now delete the WAF
                  if aws wafv2 delete-web-acl \
                    --scope CLOUDFRONT \
                    --id "$WAF_ID" \
                    --lock-token "$LOCK_TOKEN" \
                    --region us-east-1 2>&1; then
                    echo "  ✅ Existing WAF deleted - Terraform will create a new one"
                  else
                    echo "  ❌ Could not delete WAF - may need manual intervention"
                    echo "  💡 Tip: Go to AWS Console → WAF → Delete manually"
                  fi
                else
                  echo "  ❌ Could not get lock token for WAF deletion"
                fi
              else
                echo "  ℹ️  WAF import failed for other reason - will attempt creation"
              fi
            fi
          else
            echo "  ℹ️  No existing WAF found - Terraform will create one"
          fi
          
          # CloudFront
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "☁️  CLOUDFRONT DISTRIBUTION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          DIST_JSON=$(aws cloudfront list-distributions --output json 2>/dev/null || echo '{"DistributionList":{"Items":[]}}')
          DIST_ID=$(echo "$DIST_JSON" | jq -r ".DistributionList.Items[] | select(.Comment==\"${PREFIX} distribution\") | .Id" 2>/dev/null)
          
          universal_import "aws_cloudfront_distribution.main" "$DIST_ID" "CloudFront Distribution"
          
          # CloudWatch
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 CLOUDWATCH DASHBOARD"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if aws cloudwatch get-dashboard --dashboard-name "${PREFIX}-dashboard" --region us-east-1 &>/dev/null; then
            universal_import "aws_cloudwatch_dashboard.main" "${PREFIX}-dashboard" "Dashboard"
          else
            echo "  ℹ️  Dashboard not found (will be created)"
          fi
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Resource reconciliation complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          set -e  # Re-enable exit on error

      - name: 📋 Terraform Plan
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          echo "📋 Creating execution plan..."
          terraform plan -out=tfplan

      - name: 🚀 Terraform Apply
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          echo "🚀 Applying infrastructure..."
          terraform apply -auto-approve tfplan

      - name: 📤 Get Outputs
        id: outputs
        working-directory: ${{ needs.setup.outputs.tf_dir }}
        run: |
          echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT

      - name: 📁 Sync Website Content
        run: |
          BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          if [ "$BUCKET" = "N/A" ]; then
            echo "⚠️ Bucket not available"
            exit 0
          fi
          
          # Create default if needed
          if [ ! -d "website" ]; then
            mkdir -p website
            cat > website/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>🚀 Deployed Successfully</title>
              <style>
                  body {
                      font-family: system-ui, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                  }
                  .card {
                      text-align: center;
                      padding: 3rem;
                      background: rgba(255,255,255,0.1);
                      border-radius: 20px;
                      backdrop-filter: blur(10px);
                  }
                  h1 { font-size: 3rem; margin: 0 0 1rem; }
                  .badges { margin: 2rem 0; }
                  .badge {
                      display: inline-block;
                      padding: 0.5rem 1rem;
                      margin: 0.25rem;
                      background: rgba(255,255,255,0.2);
                      border-radius: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="card">
                  <h1>🚀</h1>
                  <h1>Infrastructure Live!</h1>
                  <p>Your secure AWS infrastructure is operational</p>
                  <div class="badges">
                      <span class="badge">✅ HTTPS</span>
                      <span class="badge">🛡️ WAF</span>
                      <span class="badge">☁️ CDN</span>
                      <span class="badge">🔒 Secure</span>
                  </div>
                  <p style="opacity:0.8;font-size:0.9rem;">Build #${{ github.run_number }}</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Sync to S3
          aws s3 sync website/ s3://$BUCKET/ \
            --delete \
            --cache-control "max-age=3600"

      - name: 🔄 Invalidate Cache
        run: |
          DIST="${{ steps.outputs.outputs.distribution_id }}"
          [ "$DIST" != "N/A" ] && aws cloudfront create-invalidation --distribution-id $DIST --paths "/*" || true

      - name: 📊 Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Deployment Complete
          
          **URL:** https://${{ steps.outputs.outputs.cloudfront_domain }}
          
          | Resource | Value |
          |----------|-------|
          | CloudFront | \`${{ steps.outputs.outputs.distribution_id }}\` |
          | S3 Bucket | \`${{ steps.outputs.outputs.s3_bucket }}\` |
          
          ### Quick Links
          - [View Website](https://${{ steps.outputs.outputs.cloudfront_domain }})
          - [CloudFront Console](https://console.aws.amazon.com/cloudfront/v3/home#/distributions/${{ steps.outputs.outputs.distribution_id }})
          - [S3 Console](https://s3.console.aws.amazon.com/s3/buckets/${{ steps.outputs.outputs.s3_bucket }})
          
          💡 CloudFront may take 10-15 minutes to fully propagate
          EOF